//package org.example;
//
//class Main {
//    public static void main(String[] args) {
//        // 문제1 : 아래가 실행되도록 해주세요.
//        무기 a무기 = new 칼();
//
//        // 문제2 : 아래가 실행되도록 해주세요.
//        칼 a칼 = new 칼();
//        a칼 = new 활();
//
//        // 문제3 : 아래가 실행되도록 해주세요.
//        a무기.공격();
//        // 출력 : 칼로 공격합니다.
//    }
//}
//
//// 문제1 : 아래가 실행되도록 해주세요. 답
////class 무기 {
////    // 문제3 : 아래가 실행되도록 해주세요. 답
////    void 공격() {
////        // 구현하지 마세요. 상속된 클래스에서만 구현합니다.
////    }
////} // 전체 주석 이유 : 문제 3에서 새로운 클래스를 같은 이름으로 구현했기 때문에. 문제 1 답으로는 주석을 제외하고 생각해야 합니다.
//
//// 문제3 : 아래가 실행되도록 해주세요. 답 2
//// 추상클래스 사용. 이 문법을 이용하면 문법적으로 추상클래스 내에서 기능을 구현하는 것을 막을 수 있습니다.
//abstract class 무기 {
//    abstract void 공격();
//}
//
//// 문제1 : 아래가 실행되도록 해주세요. 답
//class 칼 extends 무기 {
//    // 문제3 : 아래가 실행되도록 해주세요. 답
//    void 공격() {
//        System.out.println("칼로 공격합니다.");
//    }
//}
//
//// 문제2 : 아래가 실행되도록 해주세요. 답
//class 활 extends 칼 {
//
//}